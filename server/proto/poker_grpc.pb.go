// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PokerServiceClient is the client API for PokerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PokerServiceClient interface {
	CardStream(ctx context.Context, in *CardRequest, opts ...grpc.CallOption) (PokerService_CardStreamClient, error)
}

type pokerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPokerServiceClient(cc grpc.ClientConnInterface) PokerServiceClient {
	return &pokerServiceClient{cc}
}

func (c *pokerServiceClient) CardStream(ctx context.Context, in *CardRequest, opts ...grpc.CallOption) (PokerService_CardStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &PokerService_ServiceDesc.Streams[0], "/poker.PokerService/CardStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &pokerServiceCardStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PokerService_CardStreamClient interface {
	Recv() (*CardResponse, error)
	grpc.ClientStream
}

type pokerServiceCardStreamClient struct {
	grpc.ClientStream
}

func (x *pokerServiceCardStreamClient) Recv() (*CardResponse, error) {
	m := new(CardResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PokerServiceServer is the server API for PokerService service.
// All implementations must embed UnimplementedPokerServiceServer
// for forward compatibility
type PokerServiceServer interface {
	CardStream(*CardRequest, PokerService_CardStreamServer) error
	mustEmbedUnimplementedPokerServiceServer()
}

// UnimplementedPokerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPokerServiceServer struct {
}

func (UnimplementedPokerServiceServer) CardStream(*CardRequest, PokerService_CardStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CardStream not implemented")
}
func (UnimplementedPokerServiceServer) mustEmbedUnimplementedPokerServiceServer() {}

// UnsafePokerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PokerServiceServer will
// result in compilation errors.
type UnsafePokerServiceServer interface {
	mustEmbedUnimplementedPokerServiceServer()
}

func RegisterPokerServiceServer(s grpc.ServiceRegistrar, srv PokerServiceServer) {
	s.RegisterService(&PokerService_ServiceDesc, srv)
}

func _PokerService_CardStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CardRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PokerServiceServer).CardStream(m, &pokerServiceCardStreamServer{stream})
}

type PokerService_CardStreamServer interface {
	Send(*CardResponse) error
	grpc.ServerStream
}

type pokerServiceCardStreamServer struct {
	grpc.ServerStream
}

func (x *pokerServiceCardStreamServer) Send(m *CardResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PokerService_ServiceDesc is the grpc.ServiceDesc for PokerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PokerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "poker.PokerService",
	HandlerType: (*PokerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CardStream",
			Handler:       _PokerService_CardStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/poker.proto",
}
